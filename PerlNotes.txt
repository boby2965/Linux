Perl Scripting
--------------
- PERL stands for Practical Extraction and Reporing Language 
- PERL is a language 

Uses of PERL:
    - Text processing
    - System administration tasks 
    - CGI(computer graphics interface) and web programming 
    - Database Interactions
    - Other internet programmig 

Creating PERL program:
----------------------
    - create file "hello.pl" 
    - add a "shebang" line  
        #!usr/bin/perl
    - add a text 
        print "Hello World\n";
    - save and exit the file 
    - make the file executable by using 
        chmod +x hello.pl 
    - run the script by using 
        perl hello.pl 
            (or) 
        ./hello.pl 

PERL comments:
--------------
    - starts with hash (#)
    syntax:
        #This is a hello world program 
        print "Hello World!\n";         #print 

Command Line options:
---------------------
    - Many options to control execution of the program 
        ex: -w turns on warnings
    - Used on command line 
        perl -w hello.pl
    - Else cen be used on shebang line as 
        #!/usr/bin/perl -w 
    
Variables:
----------
    - A vaiable is place where we store the data 
    - A variable needs a name to store the data 
        - retreive the data stored in it 
        - put new data in it 
    - Variable names can contain Alphanumeric Charecters and underscores 
    - User variable names may not start with numbers 
    - variable names are preceeded by a punctuation mark indicating the type of data 
    - Different types of variables start with different symbol 
        1) Scalar variable  - $
        2) Array Variable   - @
        3) Hash Variable    - %

    Scalar Variable:
    ---------------
    - Stores a single item of data 
         $city = "New York";
         $country = 'USA';
         $Mobile_Number = 9999999;

    - perl converts between strings and numbers whenever necessary 
        # add int to a floating point number 
            $sum = $num1 + $num2;
        # putting the number in a string 
            print "$name says, 'The sum of numbers is $sum.'\n";

    - single quotes doesn't expand variables or escape sequences
        $price = '$9.95';

    - Double quotes do 
        $invline = "24 widgets @ $price each \n";

    - use backslash to escape special characters in double quoted strings 
        print "He said \"The price is \$300\"";
                (or)
        print qq(He said "the price is \$300");

    - A scalar value that hasn't  had data put into it will contain the special value "undef" (Undefined)
    
    Array Variables:
    ---------------
    - Arrays contains an ordered list of scalar values 
        @fruits = ( 'apple', 'oranges', 'guavas', 'passionfruit', 'grapes');
        @magic_number = (23,42,69);
        @random_scalars = ('apples', 123.45, 'oranges', -100, $name);

    - Accessing individual elements of an array ca be done by using
        print $fruits[0];           # prints "apples"
        print $random_scalars[2];   # prints "oranges"
    
    Note:
        Use of $ as individual element of an array is a scalar.

    - Array slices returns list of elements from an array 
        print @fruits[0,2,4];       # prints "apples", "guavas", "grapes"
        print @fruits[1 .. 3];      # prints "oranges", "guavas", "passionfruit"
    
    Note:
       we are useing @ as we are accessing more than one element of the array.
    
    - Setting array values can be done by using  
        $array[4] = 'something';
        $array[400] = 'something else';

    - also by using slices 
        @array[4,7 .. 9] = ('four', 'seven', 'eight', 'nine');
        @array[1,2] = @array[2,1];

    - $@array is the size of the array element in @array 
    - Therefore "$#array + 1" is the number of elements in the array
        
